Please answer the below core-java Questions:

*-What is programing language?
A.
A programming language is a set of commands, instructions,
and other syntax use to create a software program.
Languages that programmers use to write code are called "high-level languages."
This code can be compiled into a "low-level language,"
which is recognized directly by the computer hardware.
=================================================
*-What jdk contains or composed of and define each components?
A.
JDK - java development kit for developers ) -is Kit which provides the environment to develop and execute(run) the Java program.
         JDK (development toolkit) = (JRE+Library classes).

=================================================
*-What is IDE?
A.
IDE-(Integrated Development Environment)
An IDE, or Integrated Development Environment, enables programmers to consolidate the different aspects of writing a computer program.

=================================================
*-What are the IDEs available in the market to support java?
A.
Eclipse
IntelliJ
NetBeans
JDeveloper
MyEclipse
BlueJ
JCreator
DrJava
jGRASP
JSource

=================================================
*-Explain the entire java life cycle.
A.
  1-Editing the program(editor)
     First, you will start with typing the program in a text-editor (ex: notepad, notepad++,
     wordpad, textedit etc). After completing editing of the program, we have to save the file.
     While saving the file you should remember that the file must be saved with .java extension.
     For example, let’s think that I had written a Java program which contains a single class Sample (more on classes in future posts).
     It is a good convention to save the file with the name of the class.
     So, as per my example, the file will be saved as Sample.java.
  2-Compiling the (source code)
     Second step is compilation. The name of the Java compiler is javac. The input to the compiler is Java source code which is available in Sample.java.
     The output of the compiler is machine independent or platform independent code which is known as bytecode.
     The file which is generated after compilation is .class file. As per my example, the bytecode file will be Sample.class.
  3-Executing the byte code(Javac)
     Last step is execution.
        -Bytecodes(.class)The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM).
        -(JVM)Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.
        -Operating System
=================================================
*-what is class?
A.
classes are a blueprint of Object and a guide how to create Objects, is a file we can right code,

=================================================
*-What is object?
A.
An object is an instance of class where it define the characteristics of the class,
which is State and Behaviors of the Object
-State represent Variables
-Behaviors has relation with Methods

=================================================
*-What is the entry point of an application?
A.
-The main method -is the entry point of a Java application.
    Specifically、when the Java Virtual Machine is told to run an application by specifying its class (by using the java application launcher),
    it will look for the main method with the signature of public static void main(String[]).

=================================================
*-Why main is static?
A.
Java main() method is always static, so that compiler can call it without the creation of an object or before the creation of an object of the class.
    In any Java program,
    the main() method is the starting point from where compiler starts program execution. So,
    the compiler (JVM) can call the main() method without creating an instance of the class.

=================================================
*-Which class is the superclass of all classes?
A.
Java. lang. Object class is the root or superclass of the class hierarchy, which is present in java.

=================================================
*-What is difference between path and classpath variables?
A.
    1)The main difference between PATH and CLASSPATH is that PATH is an environment variable which is used to locate JDK binaries like "java" or "javac" command used to run java program and compile java source file.
    On the other hand, CLASSPATH, an environment variable is used by System or Application ClassLoader to locate and load compile Java bytecodes stored in the .
    2) In order to set PATH in Java, you need to include JDK_HOME/bin directory in PATH environment variable while in order to set CLASSPATH in Java you need to include all those directories where you have put either your.
    class file or JAR file which is required by your Java application.
    3) Another significant difference between PATH and CLASSPATH is that PATH can not be overridden by any Java settings but CLASSPATH can be
    overridden by providing command line option -classpath or -cp to both "java" and "javac" commands or by using Class-Path attribute in Manifest file inside JAR archive.
    4) PATH environment variable is used by operating system to find any binary or command typed in the shell, this is true for both Windows and Linux environment
    while CLASSPATH is only used by Java ClassLoaders to load class files.

=================================================
*-What is the difference between an Interface and Abstract class?
A.
1-Main difference is methods of a Java interface are implicitly abstract and cannot have implementations. A Java abstract class can have instance methods that implements a default behavior.
2-Variables declared in a Java interface is by default final. An  abstract class may contain non-final variables.
3-Members of a Java interface are public by default. A Java abstract class can have the usual flavors of class members like private, protected, etc..
4-Java interface should be implemented using keyword “implements”; A Java abstract class should be extended using keyword “extends”.
5-An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces.
6-A Java class can implement multiple interfaces but it can extend only one abstract class.
7-Interface is absolutely abstract and cannot be instantiated; A Java abstract class also cannot be instantiated, but can be invoked if a main() exists.
8-In comparison with java abstract classes, java interfaces are slow as it requires extra indirection.

=================================================
*-Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
A.
No,we can't create an object of an abstract class. But we can create a reference variable of an abstract class.
The reference variable is used to refer to the objects of derived classes (subclasses of abstract class).
An abstract class means hiding the implementation and showing the function definition to the user is known as Abstract class.
A Java abstract class can have instance methods that implement a default behavior if we know the requirement and partially implementation we can go for an abstract class

=================================================
*-what is Access Specifier?
A.
Java provides a number of access modifiers to set access levels for classes, variables, methods, and constructors. The four access levels are −
     (Default)- No Keyword Visible to the package, . No modifiers are needed,Default access modifier means we do not explicitly declare an access modifier for a class, field, method.
     Public  call variable from all packages and classes (hole Project)
     Private  not giving permission from outside of the class
     Protected  access only from the same package and any classes in that package not different package and all subclass.

=================================================
*-What is OOP ? Define each feature of java OOP.
A.
   OOP concepts in Java are the main ideas behind Java’s Object Oriented Programming. They are an abstraction, encapsulation, inheritance, and polymorphism.
   Grasping them is key to understanding how Java works.
   Basically, Java OOP concepts let us create working methods and variables, then re-use all or part of them without compromising security.
-Abstraction: means using simple things to represent complexity,In Java, abstraction means simple things like objects, classes, and variables represent more complex underlying code and data.
-Encapsulation:This is the practice of keeping fields within a class private, then providing access to them via public methods.
   It’s a protective barrier that keeps the data and code safe within the class itself.
-Inheritance: It lets programmers create new classes that share some of the attributes of existing classes.
-Polymorphism: This Java OOP concept lets programmers use the same word to mean different things in different contexts.
   One form of polymorphism in Java is method overloading. That’s when different meanings are implied by the code itself.
   The other form is method overriding. That’s when the different meanings are implied by the values of the supplied variables

=================================================
*-What is Java Package and which package is imported by default?
A.A java package is a group of similar types of classes, interfaces, and sub-packages.
Package in java can be categorized in two form, built-in package, and user-defined package.
There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, sql etc.Here, we will have the detailed learning of creating and using user-defined packages.
  The default package
      Is an unnamed package. The unnamed package contains java classes whose source files did not contain a package declaration.
      The purpose of default package is for convenience when developing small or temporary applications or when just beginning development.
      The compiled class files will be in the current working directory.
      Note that an unnamed package cannot have subpackages, since the syntax of a package declaration always includes a reference to a named top level package.
      A compilation unit that has no package declaration is part of an unnamed package.
      Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.
      An implementation of the Java platform must support at least one unnamed package; it may support more than one unnamed package but is not required to do so.
      Which compilation units are in each unnamed package is determined by the host system.

=================================================
*-What is API? Name list of API that you have used so far.
A.
When you use an application on your mobile phone, the application connects to the Internet and sends data to a server.
The server then
API -> Application Programming Interface
List of API -> CORE Java API, Google, Android ,AppStore

=================================================
*-Does java support multiple inheritance, explain why or why not?
A.
  Java support multiple inheritance because we can implement more than one interfaces in our program because that doesn't cause any ambiguity.

=================================================
*-What is method overloading and when it happens?
A.
Overloading:
      happen during compile time
      Same method name but different signature

=================================================
*-Explain exceptions in java and how to handle it.
A.
    Exceptions:
    An Exception is an unwanted event that interrupts the normal flow of the program.
    Exceptions Handling:
    Java provides two different options to handle an exception:
    *You can either use the try-catch-finally approach to handle all kinds of exceptions.
    *Or you can use the try-with-resource approach which allows an easier cleanup process for resources.

=================================================
*-What is static keyword in java? How it has been used in variables and methods ?
A.
    -In Java, static keyword is mainly used for memory management.
    -It can be used with variables, methods, blocks and nested classes.
    -It is a keyword which is used to share the same variable or method of a given class.
    -Basically, static is used for a constant variable or a method that is same for every instance of a class.

=================================================
*-What is final and how it has been used variables and methods?
A.
the final keyword can be used while declaring an entity. Using the final keyword means that the value can’t be modified in the future.
        {====Final variables===}
        If a variable is declared with the final keyword, its value cannot be changed once initialized.
        Note that the variable does not necessarily have to be initialized at the time of declaration.
        If it’s declared but not yet initialized, it’s called a blank final variable.
        {====Final methods===}
        A method, declared with the final keyword, cannot be overridden or hidden by subclasses.

=================================================
*-What is final, finally and finalize?
A.
    +======================================+========================================+===============================================+
    | final	                               |       finally	                        |               finalize                        |
    +======================================+========================================+===============================================+
    |Final is a keyword                    |finally is a block.                     |Finalize is a method.                          |
    +======================================+========================================+===============================================+
    |Final is used to apply restrictions   |Finally is used to place important code,|Finalize is used to perform clean up processing|
    |on class, method and variable.        |it will be executed whether exception   |just before object is garbage collected.       |
    |Final class can't be inherited,       |is handled or not.                      |                                               |
    |final method can't be overridden and  |used in a try/catch statement to execute|                                               |
    |final variable value can't be changed.|code always                             |                                               |
    +======================================+========================================+===============================================+

=================================================
*-What is a constructor ?
A.
  A Constructor in Java is a block of code that initializes the newly created object.
  A constructor resembles an instance method in java but it’s not a method as it doesn’t have a return type.
  In short constructor and method are different.
  People often refer constructor as special type of method in Java.

=================================================
*-Can we have multiple constructors in a class?
A.
  Yes.

=================================================
*-If we don't have a constructor declared, what is called during the object creation?
A.

=================================================
*-What is "this" keyword in java ?
A.
    Within an instance method or a constructor, this is a reference to the current object, the object whose method or constructor is being called.
    we can refer to any member of the current object from within an instance method or a constructor by using this.

=================================================
*-What is "super" keyword in java? How many possible way can you use?
A.
      -The super keyword in Java is a reference variable which is used to refer immediate super class object.
      Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.
       Usage of Java super Keyword
        1)super can be used to refer immediate parent class instance variable.
        2)super can be used to invoke immediate parent class method.
        3)super() can be used to invoke immediate parent class constructor.

=================================================
*-What is JVM stand for ?
A.
(Java Virtual Machine).

=================================================
*-Is JVM platform independent?
A.
  JVM (Java virtual machine) is platform dependant while java language is platform independent.
  Jvm is one kind of interface or middleware between OS(Operating Systems) and java language.
  Jvm provides thd environment to execute the java file(. Class file).
  So at the end it's depends on the kernel. And kernel is differ from OS to OS. So JVM is platform dependant.

=================================================
*-What version of java are you using?
A.
from my command:java -version
                     java version 11.0.8

=================================================
*-What is JAR stand for ?
A.
A JAR stan for :(Java ARchive).

=================================================
*-What is the difference between JDK and JVM?*-What is the difference between JVM and JRE?
A.
     JDK java development kit for developers ) is Kit which provides the environment to develop and execute(run) the Java program.
     JRE java runtime Environment. it helps us generate our code is an installation package which provides environment to only run(not develop) the java program(or application)onto your machine.
     JVM – Java Virtual machine(JVM) is a very important part of both JDK and JRE because it is contained or inbuilt in both.
     Whatever Java program you run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line by line hence it is also known as interpreter.
            JDK = JRE + development tools.
        	JRE = JVM + Library classes.

=================================================
*-What is compile time and run time?
A.
      -Compile: compile time error when it converts to java.Class to java.classfile
      -runtime: (JVM) after compile when the JVM grub (Classfile) process the code and interpret ,and verify, after verifying it will give us output (printout in the console)

=================================================
*-What is heap?
A.
     Heap space in Java is used for dynamic memory allocation for Java objects and JRE classes at the runtime.
     New objects are always created in heap space and the references to this objects are stored in stack memory.

=================================================
*-How java manage it's memory?
A.
    Local variables live on the stack
    – Allocated at method invocation time
    – Deallocated when method returns
    Other data lives on the heap
    – Memory is allocated with new
    – But never explicitly deallocated
=================================================
*-What is the difference between String, StringBuffer and StringBuilder?
A.
1-String is immutable whereas StringBuffer and StringBuilder are mutable classes.(Static)
2-StringBuffer is thread-safe and synchronized whereas StringBuilder is not. That’s why StringBuilder is faster than StringBuffer.(Dynamic)
3-String concatenation operator (+) internally uses StringBuffer or StringBuilder class.
For String manipulations in a non-multi threaded environment, we should use StringBuilder else use StringBuffer class.

=================================================
*-What is Singleton class?
A.
    Singleton:
    is to “Ensures a class has only one instance and provide a global point of access to it”
    Singleton class: we are allowed to create one instance of a class at a time.
    Using private constructor we can ensure that no more than one object can be created at a time.
    To design a singleton class:
       1)-Make constructor as private.
       2)-Write a static method that has return type object of this singleton class. Here, the concept of Lazy initialization is used to write this static method.

=================================================
*-What is Serialization and Deserialization?
A.
    =Serialization= is a mechanism of converting the state of an object into a byte stream.
    =Deserialization= is the reverse process where the byte stream is used to recreate the actual Java object in memory.
    This mechanism is used to persist the object.

=================================================
*-when to use transient variable in java?
A.
   transient variable in Java is a variable whose value is not serialized during Serialization and which is initialized
    by its default value during de-serialization, for example for object transient variable it would be null.
   this behavior can be customized by using Custom Serialized form or by using Externalizable interface.
   transient variable is used to prevent any object from being serialized and you can make any variable transient by using transient keyword.

=================================================
*-Difference between while and do..while loop?
A.
        +========================================+========================================+
        | While Loop                             |       Do While Loop                    |
        +========================================+========================================+
        |Condition is checked first then         |Statement(s) is executed at least once, |
        |statement(s) is executed.               |thereafter condition is checked.        |
        +========================================+========================================+
        |It might occur statement(s) is executed |At least once the statement is executed.
        |zero times, If condition is false.      |
        +========================================+========================================+
        |Final is a keyword                      |finally is a block.                     |
        +========================================+========================================+
        |No semicolon at the end of while.       |Semicolon at the end of while.          |
        |while(condition)                        |while(condition);                       |
        +========================================+========================================+
        |If there is a single statement,         |Brackets are always required.           |
        |brackets are not required.                                                       |
        +========================================+========================================+
        |Variable in condition is initialized    |variable may be initialized before      |
        |before the execution of loop.           |or within the loop.                     |
        +========================================+========================================+
        |while loop is entry controlled loop.    |do-while loop is exit controlled loop.  |
        +========================================+========================================+
        |while(condition)                        |do { statement(s); }                    |
        |{ statement(s); }                       |while(condition);                       |
        +========================================+========================================+

=================================================
*-What is Enum?
A.
    An enum is a special "class" that represents a group of constants (unchangeable variables,
    like final variables). To create an enum ,
    use the enum keyword (instead of class or interface),
    and separate the constants with a comma.

=================================================
*-What is Iterator?
A.Iterator is an interface that belongs to a collection framework. It allows you to traverse the collection,
accesses the data element and removes the data elements of the collection.
It is also considered as a Universal iterator as you can apply it to any Collection object

=================================================
*-Which one will take more memory, an int or Integer?
A.
An int is just one form of Integer
Integer is an object which takes 128 bits (16 bytes) to store int value,.. int is a primitive data type which takes 32 bits(4 bytes) to store.

=================================================
*-What is constructor chaining in Java?
A.
    Constructor chaining is the process of calling one constructor from another constructor with respect to current object.
        -Constructor chaining can be done in two ways:
     -Within same class: It can be done using this() keyword for constructors in same class
     -From base class: by using super() keyword to call constructor from the base class.

=================================================
*-The difference between Serial and Parallel Garbage Collector?
A.
            +========================================+=========================================+
            | Serial Collector                       |    Parallel Garbage Collector           |
            +========================================+=========================================+
            |The serial collector is the simplest    |is the JVM’s default collector.          |
            |one                                     |                                         |
            +========================================+=========================================+
            |mainly designed for single-threaded     |its biggest advantage is that is uses   |
            |environments(e.g. 32 bit or Windows)    |multiple threads to can through and     |
            |and for small heaps.                    |compact the heap.                       |
            +========================================+=========================================+
            |This collector freezes all application  |The downside to the parallel collector is|
            |threads whenever it’s working, which    |that it will stop application threads    |
            |disqualifies it for all intents and     |when performing either a minor or full GC|
            |purposes from being used in a server    |collection. The parallel collector is    |
            |environment                             |best suited for apps that can tolerate   |
            |How to use it: You can use it by turning|application pauses and are trying to     |
            |on the -XX:+UseSerialGC JVM argument,   |optimize for lower CPU overhead caused by|
            |                                        |the collector.                           |
            +========================================+=========================================+

=================================================
*-What is JIT stands for?
A.
    Just-in-time (JIT) is a term used to describe an action such as compilation or object activation only at the time when it becomes necessary.
    This term is associated mostly with software compilation.
    JIT compilation is mainly designed for high-speed code execution and support for multiple platforms.
    JIT compilation originated from the need for a compiler to assume responsibilities in addition to just conversion to object code (machine instructions) from a high-level language.
    JIT compilers facilitate portability to multiple operating systems and hardware platforms.
    Languages such as Smalltalk, Pascal Java, and C# support JIT compilation.

=================================================
*-Explain Java Heap space and Garbage collection?
A.
   *Heap space:
        -in Java is used for dynamic memory allocation for Java objects and JRE classes at the runtime.
        New objects are always created in heap space and the references to this objects are stored in stack memory.
        These objects have global access and can be accessed from anywhere in the application.
        This memory model is further broken into smaller parts called generations, these are:
           1)Young Generation – this is where all new objects are allocated and aged.
            A minor Garbage collection occurs when this fills up
           2)Old or Tenured Generation – this is where long surviving objects are stored.
            When objects are stored in the Young Generation, a threshold for the object's age is set and when that threshold is reached,
            the object is moved to the old generation
           3)Permanent Generation – this consists of JVM metadata for the runtime classes and application methods
   *Java garbage collection:
        -is the process by which Java programs perform automatic memory management.
        Java programs compile to bytecode that can be run on a Java Virtual Machine, or JVM for short.
        When Java programs run on the JVM, objects are created on the heap,
        which is a portion of memory dedicated to the program.
        Eventually, some objects will no longer be needed.
        The garbage collector finds these unused objects and deletes them to free up memory.

=================================================
*-Can you guarantee the garbage collection process?
A.
    No guarantee:
    garbage collection in Java is a non-deterministic, and there is no way to predict when garbage collection will occur at run time.
    It is possible to include a hint in the code to run the garbage collector with the System.gc() or Runtime.gc() methods.
    but they provide no guarantee that the garbage collector will actually run.

=================================================
*-What is the difference between stack and heap in Java?
A.
    +=================================================+=================================================+
    |          Stack memory                           |   Heap memory                                   |
    +=================================================+=================================================+
    |used to store local variables and function calls |used to store objects in Java.                   |
    |                                                 |No matter, where the object is created           |
    |                                                 |in code e.g. as a member variable,               |
    |                                                 |local variable, or class variable,               |
    |                                                 |they are always created inside heap              |
    |                                                 |space in Java                                    |
    +=================================================+=================================================+
    |Each Thread in Java has their own stack which    |you can also specify heap size of Java program   |
    |can be specified using -Xss JVM parameter        |using JVM option -Xms and -Xmx where             |
    |                                                 |the heap and -Xmx is a maximum size of java heap.|
    +=================================================+=================================================+
    |If there is no memory left in the stack for      |if there is no more heap space for creating an   |
    |storing function call or local variable,         |object, JVM will throw java.lang.                |
    |JVM will throw java.lang.StackOverFlowError      |OutOfMemoryError: Java Heap Space.               |
    |                                                 |Read more about how to deal with java.           |
    |                                                 |lang.OutOfMemoryError.                           |
    +=================================================+=================================================+
    |If you are using Recursion, on which method calls|larger size memory                               |
    |itself, You can quickly fill up stack memory.    |                                                 |
    |Another difference between stack and heap is that|                                                 |
    |size of stack memory is a lot lesser than the    |                                                 |
    |size of heap memory in Java.                     |                                                 |
    +=================================================+=================================================+
    |Variables stored in stacks are only visible      |objects created in the                           |
    |to the owner Thread                              |heap are visible to all threads.                 |
    |                                                 |In other words, stack memory is a kind of        |
    |                                                 |private memory of Java Threads while heap        |
    |                                                 |memory is shared among all threads.              |
    +=================================================+=================================================+

=================================================
*-What is reflection in java and why is it useful?
A.
    Object Reflection: is a feature in Java which provides a way to get reflective
    information about Java classes and objects, such as:
    1) Getting information about methods and fields present inside the class at run time
    2) Creating a new instance of a class
    3) Getting and setting the object fields directly by getting field reference,
       regardless of what the access modifier is.
       it is useful:
        1) Helps in observing or manipulating the runtime behavior of applications.
        2) Useful while debugging and testing applications, as it allows direct access to methods, constructors, fields

=================================================
*-what is multithreading in java?
A.
    Multithreading means that you have multiple threads of execution inside the same application.
     A thread is like a separate CPU executing your application. Thus,
     a multithreaded application is like an application that has multiple CPUs executing
     different parts of the code at the same time.

=================================================
*-What is the use of synchronization in Java?
A.
    If your code is running in a multi-threaded environment,
    You need to synchronize the objects that are shared across multiple threads.
    If not, two types of errors could occur.
          1-Thread Interference Error:
             Thread interference in java is a condition that occurs when more than one thread,
             running simultaneously, has access to the same piece of data.
             When threads perform different operations on the same data,
             the operations may overlap and create inconsistent data in the memory.
             When that happens, the data might get lost, corrupted, or show unexpected behavior.
          2-Memory Consistency ErrorIn multithreading, there may be possibilities
          that changes made by one thread may not be visible to the other threads and that
          they all have inconsistent views of the same shared data.

=================================================
*-What is Framework?
A.
    Framework are the bodies that contains the pre-written codes (classes and functions) in which
    we can add our code to overcome the problem. We can also say that frameworks use programmer's
    code because the framework is in control of the programmer. We can use the framework by calling its methods,
    inheritance, and supplying "callbacks", listeners, or other implementations of the Observer pattern.

=================================================
*-What are the testing Framework available in java?

JBehave       #     The Grinder  #
JUnit         #     TestNG       #
Serenity      #     JWalk        #
TestNG        #     Mockito      #
Cucumber      #     RESTAssured  #
Mocha         #     JSUnit       #
Arquillian    #     Jasmine      #
JTest         #     Karma        #

=================================================
*-Difference between jUnit and testNG?
A.
    TestNG vs Junit
   = Annotations In JUnit and TestNG:there is a slight difference between the name of some of the annotations, but their working remains the same
   = Test Suite In JUnit and TestNG:both of them can run the tests using test suites, how they do so is slightly different
   = Ignore Test in JUnit and TestNG : the declaration is different.
   = Exception Test in TestNG and JUnit: with a slight variation in the declaration
   = Timeout Test In JUnit and TestNG : no defences.
   = Group Test in JUnit and TestNG: It is a new feature and comes with TestNG only, TestNG allows groups to declare inside the XML file.
   = Reporting in JUnit and TestNG: There is no such option to generate a report in JUnit BUT In TestNG, the tester gets the advantage of generating HTML and Index reports, which are generated by default.
   = Parameterized Test in JUnit and TestNG : TestNG a more natural way compared to JUnit.
   = Dependent Tests in JUnit and TestNG : JUnit currently does not support dependent tests while TestNG does
   = Parallel Test Execution in JUnit and TestNG :JUnit does not support parallel execution of tests, but TestNG does

=================================================
*-What are the dependencies for this project?
A.
    Class/Interface Dependencies
    Compile/RunTime Dependencies
    Direct and Indirect Dependencies
    JAR Dependencies

=================================================
*-what is dependency injection in java?
A.
    The dependency injection technique is used to generate the code withe external dependencies
    create a Test Double Allowing our code to deal with dependencies instead of creating them itself.
    example:
   - When you create a code to send an email : and you don’t want to send it,build a test double for send email and check if the email will be received,
   - The reminder for appointments: you cannot test it because there is no localhost

=================================================
*-What is static binding and dynamic binding?
A.
   - Static Binding that happens at compile time (Early Binding):
            early binding is The binding of static, private and final methods is compile-time.
            The reason is that the these method cannot be overridden and the type of the class is
            determined at the compile time.
   - Dynamic Binding that happens at runtime.(Late Binding)
            When compiler is not able to resolve the call/binding at compile time, such binding is known as Dynamic or late Binding.
            Method Overriding is a perfect example of dynamic binding as in overriding both parent and child classes have same method
            and in this case the type of the object determines which method is to be executed.
            The type of object is determined at the run time so this is known as dynamic binding.






